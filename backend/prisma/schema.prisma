// ------------------------
// schema.prisma (All Good)
// ------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------
// ENUMS
// ------
enum YesNo {
  YES
  NO
}

enum AssignmentType {
  PRIMARY
  SECONDARY
}

enum ResponseType {
  OLD_PROPERTY
  NEW_PROPERTY
  DOOR_LOCK
  ACCESS_DENIED
}

enum PropertyType {
  HOUSE
  FLAT
  PLOT_LAND
}

enum RespondentStatus {
  OWNER
  OCCUPIER
  TENANT
  EMPLOYEE
  OTHER
}

enum RoadType {
  WIDTH_LESS_THAN_3M
  WIDTH_3_TO_11M
  WIDTH_12_TO_24M
  WIDTH_MORE_THAN_24M
}

enum ConstructionType {
  CONSTRUCTED
  NOT_CONSTRUCTED
  UNDER_CONSTRUCTION
}

enum WaterSource {
  OWN
  MUNICIPAL
  PUBLIC_TAP_WITHIN_100_YARDS
  PUBLIC_TAP_MORE_THAN_100_YARDS
}

enum DisposalType {
  SEWERAGE
  SEPTIC_TANK
}

enum ConstructionNature {
  PUCCKAA_RCC_RB_ROOF
  OTHER_PUCCKAA
  KUCCHHAA
}

enum SurveyType {
  RESIDENTIAL
  NON_RESIDENTIAL
  MIX
}

enum OccupancyStatus {
  SELF_OCCUPIED
  RENTED
  MIX
}

enum RolePermission {
  SUPER_ADMIN
  ADMIN
  SUPERVISOR
  SURVEYOR
}

// --------------
// Master Tables
// --------------

model UlbMaster {
  ulbId         String           @id @default(uuid())
  ulbName       String           @db.VarChar(50)
  isActive      Boolean          @default(false)
  description   String?          @db.Text
  ulbZoneMaps   UlbZoneMapping[]
  surveyDetails SurveyDetails[]
}

model ZoneMaster {
  zoneId        String            @id @default(uuid())
  zoneNumber    String            @db.VarChar(50)
  isActive      Boolean           @default(false)
  description   String?           @db.Text
  ulbZoneMaps   UlbZoneMapping[]
  zoneWardMaps  ZoneWardMapping[]
  surveyDetails SurveyDetails[]
}

model WardMaster {
  wardId              String               @id @default(uuid())
  wardNumber          String               @db.VarChar(20)
  isActive            Boolean              @default(false)
  wardName            String               @db.VarChar(12)
  description         String?              @db.Text
  zoneWardMaps        ZoneWardMapping[]
  wardMohallaMaps     WardMohallaMapping[]
  surveyorAssignments SurveyorAssignment[]
  wardStatusMaps      WardStatusMapping[]
  surveyDetails       SurveyDetails[]
  supervisors         Supervisors[]
}

model MohallaMaster {
  mohallaId           String               @id @default(uuid())
  mohallaName         String               @db.VarChar(50)
  isActive            Boolean              @default(false)
  description         String?              @db.Text
  wardMohallaMaps     WardMohallaMapping[]
  surveyorAssignments SurveyorAssignment[]
  surveyDetails       SurveyDetails[]
}

model ResponseTypeMaster {
  responseTypeId   String            @id @default(uuid())
  responseTypeName String            @db.VarChar(50)
  isActive         Boolean           @default(false)
  description      String?           @db.Text
  propertyDetails  PropertyDetails[]
}

model PropertyTypeMaster {
  propertyTypeId   String            @id @default(uuid())
  propertyTypeName String            @db.Char(50)
  isActive         Boolean           @default(false)
  description      String?           @db.Text
  locationDetails  LocationDetails[]
}

model RespondentStatusMaster {
  respondentStatusId   String            @id @default(uuid())
  respondentStatusName String            @db.VarChar(20)
  isActive             Boolean           @default(false)
  description          String?           @db.Text
  propertyDetails      PropertyDetails[]
}

model RoadTypeMaster {
  roadTypeId      String            @id @default(uuid())
  roadTypeName    String            @db.VarChar(50)
  isActive        Boolean           @default(false)
  description     String?           @db.Text
  locationDetails LocationDetails[]
}

model ConstructionTypeMaster {
  constructionTypeId   String            @id @default(uuid())
  constructionTypeName String            @db.VarChar(50)
  isActive             Boolean           @default(false)
  description          String?           @db.Text
  locationDetails      LocationDetails[]
}

model WaterSourceMaster {
  waterSourceId   String         @id @default(uuid())
  waterSourceName String         @db.VarChar(50)
  isActive        Boolean        @default(false)
  description     String?        @db.Text
  otherDetails    OtherDetails[]
}

model DisposalTypeMaster {
  disposalTypeId   String         @id @default(uuid())
  disposalTypeName String         @db.VarChar(50)
  isActive         Boolean        @default(false)
  description      String?        @db.Text
  otherDetails     OtherDetails[]
}

model NrPropertyCategoryMaster {
  propertyCategoryId                String                             @id @default(uuid())
  propertyCategoryNumber            Int
  propertyCategoryName              String                             @db.VarChar(100)
  isActive                          Boolean                            @default(false)
  description                       String?                            @db.Text
  createdAt                         DateTime                           @default(now())
  subCategories                     NrPropertySubCategoryMaster[]
  nonResidentialPropertyAssessments NonResidentialPropertyAssessment[]
}

model NrPropertySubCategoryMaster {
  subCategoryId                     String                             @id @default(uuid())
  subCategoryNumber                 Int
  subCategoryName                   String                             @db.VarChar(100)
  isActive                          Boolean                            @default(false)
  description                       String?                            @db.Text
  createdAt                         DateTime                           @default(now())
  propertyCategoryId                String
  propertyCategory                  NrPropertyCategoryMaster           @relation(fields: [propertyCategoryId], references: [propertyCategoryId], onDelete: Restrict)
  nonResidentialPropertyAssessments NonResidentialPropertyAssessment[]

  @@index([propertyCategoryId])
  @@index([isActive])
}

model ConstructionNatureMaster {
  constructionNatureId              String                             @id @default(uuid())
  constructionNatureName            String                             @db.VarChar(50)
  isActive                          Boolean                            @default(false)
  description                       String?                            @db.Text
  residentialPropertyAssessments    ResidentialPropertyAssessment[]
  nonResidentialPropertyAssessments NonResidentialPropertyAssessment[]
}

model SurveyTypeMaster {
  surveyTypeId   String          @id @default(uuid())
  surveyTypeName String          @db.Char(20)
  isActive       Boolean         @default(true)
  description    String?         @db.Text
  surveyDetails  SurveyDetails[]
}

model OccupancyStatusMaster {
  occupancyStatusId                 String                             @id @default(uuid())
  occupancyStatusName               String                             @db.VarChar(50)
  isActive                          Boolean                            @default(true)
  description                       String?                            @db.Text
  residentialPropertyAssessments    ResidentialPropertyAssessment[]
  nonResidentialPropertyAssessments NonResidentialPropertyAssessment[]
}

model SurveyStatusMaster {
  statusId                 String                @id @default(uuid())
  statusName               String                @db.VarChar(50)
  isActive                 Boolean               @default(true)
  description              String?               @db.Text
  surveyStatusMaps         SurveyStatusMapping[]
  surveyStatusMapsReverted SurveyStatusMapping[] @relation("RevertedFrom")
}

model WardStatusMaster {
  statusId       String              @id @default(uuid())
  statusName     String              @db.VarChar(50)
  isActive       Boolean             @default(true)
  description    String?             @db.Text
  wardStatusMaps WardStatusMapping[]
}

model UsersMaster {
  userId                        String                @id @default(uuid())
  username                      String                @db.Char(50)
  password                      String                @db.VarChar(200)
  mobileNumber                  String?               @db.VarChar(20)
  isCreatedAt                   DateTime              @default(now())
  isActive                      Boolean               @default(false)
  description                   String?               @db.Text
  surveyorAssignments           SurveyorAssignment[]
  surveyorAssignmentsAssignedBy SurveyorAssignment[]  @relation("AssignedBy")
  wardStatusMaps                WardStatusMapping[]
  surveyStatusMaps              SurveyStatusMapping[]
  userRoleMaps                  UserRoleMapping[]
  sessions                      Session[]
  surveyors                     Surveyors[]
  supervisors                   Supervisors[]
  admins                        Admins[]
}

model RolePermissionMaster {
  roleId       String            @id @default(uuid())
  roleName     String            @db.VarChar(30)
  isActive     Boolean           @default(false)
  description  String?           @db.Text
  userRoleMaps UserRoleMapping[]
}

// ---------------
// Mapping Tables
// ---------------

model UlbZoneMapping {
  ulbZoneMapId String      @id @default(uuid())
  ulbId        String
  zoneId       String
  isActive     Boolean     @default(true)
  ulb          UlbMaster   @relation(fields: [ulbId], references: [ulbId])
  zone         ZoneMaster  @relation(fields: [zoneId], references: [zoneId])
  surveyors    Surveyors[]

  @@unique([ulbId, zoneId])
}

model ZoneWardMapping {
  zoneWardMapId String      @id @default(uuid())
  zoneId        String
  wardId        String
  isActive      Boolean     @default(true)
  zone          ZoneMaster  @relation(fields: [zoneId], references: [zoneId])
  ward          WardMaster  @relation(fields: [wardId], references: [wardId])
  surveyors     Surveyors[]

  @@unique([zoneId, wardId])
}

model WardMohallaMapping {
  wardMohallaMapId    String               @id @default(uuid())
  wardId              String
  mohallaId           String
  isActive            Boolean              @default(true)
  ward                WardMaster           @relation(fields: [wardId], references: [wardId])
  mohalla             MohallaMaster        @relation(fields: [mohallaId], references: [mohallaId])
  surveyorAssignments SurveyorAssignment[]
  surveyors           Surveyors[]

  @@unique([wardId, mohallaId])
}

model SurveyorAssignment {
  assignmentId     String             @id @default(uuid())
  userId           String
  assignmentType   String             @db.VarChar(10)
  wardId           String
  mohallaId        String
  wardMohallaMapId String
  assignedById     String
  isActive         Boolean            @default(true)
  user             UsersMaster        @relation(fields: [userId], references: [userId])
  ward             WardMaster         @relation(fields: [wardId], references: [wardId])
  mohalla          MohallaMaster      @relation(fields: [mohallaId], references: [mohallaId])
  wardMohallaMap   WardMohallaMapping @relation(fields: [wardMohallaMapId], references: [wardMohallaMapId])
  assignedBy       UsersMaster        @relation("AssignedBy", fields: [assignedById], references: [userId])

  @@unique([userId, wardId, mohallaId])
}

model WardStatusMapping {
  wardStatusId String           @id @default(uuid())
  wardId       String
  statusId     String
  changedById  String
  isActive     Boolean          @default(true)
  ward         WardMaster       @relation(fields: [wardId], references: [wardId])
  status       WardStatusMaster @relation(fields: [statusId], references: [statusId])
  changedBy    UsersMaster      @relation(fields: [changedById], references: [userId])

  @@unique([wardId, statusId])
}

model SurveyStatusMapping {
  statusMappingId  String              @id @default(uuid())
  surveyUniqueCode String
  statusId         String
  revertedFromId   String?
  changedById      String
  isActive         Boolean             @default(true)
  survey           SurveyDetails       @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])
  status           SurveyStatusMaster  @relation(fields: [statusId], references: [statusId])
  revertedFrom     SurveyStatusMaster? @relation("RevertedFrom", fields: [revertedFromId], references: [statusId])
  changedBy        UsersMaster         @relation(fields: [changedById], references: [userId])

  @@unique([surveyUniqueCode, statusId])
}

model UserRoleMapping {
  userRoleMapId String               @id @default(uuid())
  userId        String
  roleId        String
  isActive      Boolean              @default(true)
  user          UsersMaster          @relation(fields: [userId], references: [userId])
  role          RolePermissionMaster @relation(fields: [roleId], references: [roleId])

  @@unique([userId, roleId])
}

model Session {
  sessionId  String      @id @default(uuid())
  userId     String
  loginTime  DateTime
  logoutTime DateTime
  isActive   Boolean     @default(true)
  user       UsersMaster @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
}

// ------
// Users
// ------

model Surveyors {
  userId           String             @id
  surveyorName     String             @db.VarChar(50)
  username         String             @db.VarChar(50)
  password         String             @db.VarChar(50)
  wardNumber       String             @db.VarChar(12)
  wardMohallaMapId String
  zoneWardMapId    String
  ulbZoneMapId     String
  user             UsersMaster        @relation(fields: [userId], references: [userId])
  wardMohallaMap   WardMohallaMapping @relation(fields: [wardMohallaMapId], references: [wardMohallaMapId])
  zoneWardMap      ZoneWardMapping    @relation(fields: [zoneWardMapId], references: [zoneWardMapId])
  ulbZoneMap       UlbZoneMapping     @relation(fields: [ulbZoneMapId], references: [ulbZoneMapId])
}

model Supervisors {
  userId         String      @id
  supervisorName String      @db.VarChar(50)
  username       String      @db.VarChar(50)
  password       String      @db.VarChar(50)
  wardId         String
  user           UsersMaster @relation(fields: [userId], references: [userId])
  ward           WardMaster  @relation(fields: [wardId], references: [wardId])
}

model Admins {
  userId    String      @id
  adminName String      @db.VarChar(50)
  username  String      @db.VarChar(50)
  password  String      @db.VarChar(50)
  user      UsersMaster @relation(fields: [userId], references: [userId])
}

// --------
// Surveys
// --------

model SurveyDetails {
  surveyUniqueCode                  String                             @id @default(uuid())
  ulbId                             String
  zoneId                            String
  wardId                            String
  mohallaId                         String
  surveyTypeId                      String
  entryDate                         DateTime                           @db.Timestamp(0)
  parcelId                          Int?
  mapId                             Int
  gisId                             String                             @db.VarChar(12)
  subGisId                          String?                            @db.VarChar(15)
  ulb                               UlbMaster                          @relation(fields: [ulbId], references: [ulbId])
  zone                              ZoneMaster                         @relation(fields: [zoneId], references: [zoneId])
  ward                              WardMaster                         @relation(fields: [wardId], references: [wardId])
  mohalla                           MohallaMaster                      @relation(fields: [mohallaId], references: [mohallaId])
  surveyType                        SurveyTypeMaster                   @relation(fields: [surveyTypeId], references: [surveyTypeId])
  propertyDetails                   PropertyDetails[]
  ownerDetails                      OwnerDetails[]
  locationDetails                   LocationDetails[]
  otherDetails                      OtherDetails[]
  residentialPropertyAssessments    ResidentialPropertyAssessment[]
  nonResidentialPropertyAssessments NonResidentialPropertyAssessment[]
  propertyAttachments               PropertyAttachmentDetails[]
  surveyStatusMaps                  SurveyStatusMapping[]
}

model PropertyDetails {
  surveyUniqueCode              String                 @id
  responseTypeId                String
  oldHouseNumber                String?                @db.VarChar(15)
  electricityConsumerName       String?                @db.VarChar(50)
  waterSewerageConnectionNumber String?                @db.VarChar(50)
  respondentName                String                 @db.Char(50)
  respondentStatusId            String
  survey                        SurveyDetails          @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])
  responseType                  ResponseTypeMaster     @relation(fields: [responseTypeId], references: [responseTypeId])
  respondentStatus              RespondentStatusMaster @relation(fields: [respondentStatusId], references: [respondentStatusId])
}

model OwnerDetails {
  surveyUniqueCode  String        @id
  ownerName         String        @db.VarChar(50)
  fatherHusbandName String        @db.VarChar(50)
  mobileNumber      String?       @db.VarChar(20)
  aadharNumber      String?       @db.Char(12)
  survey            SurveyDetails @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])
}

model LocationDetails {
  surveyUniqueCode   String                 @id
  propertyLatitude   Decimal                @db.Decimal(9, 6) // changed type from Float to Decimal
  propertyLongitude  Decimal                @db.Decimal(9, 6) // changed type from Float to Decimal
  assessmentYear     String                 @db.VarChar(20)
  propertyTypeId     String
  buildingName       String?                @db.Text
  roadTypeId         String
  constructionYear   String                 @db.VarChar(20)
  constructionTypeId String
  addressRoadName    String                 @db.Text
  locality           String?                @db.Text
  pinCode            Int
  landmark           String?                @db.Text
  fourWayEast        String?                @db.Text
  fourWayWest        String?                @db.Text
  fourWayNorth       String?                @db.Text
  fourWaySouth       String?                @db.Text
  newWard            String                 @db.VarChar(20)
  survey             SurveyDetails          @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])
  propertyType       PropertyTypeMaster     @relation(fields: [propertyTypeId], references: [propertyTypeId])
  roadType           RoadTypeMaster         @relation(fields: [roadTypeId], references: [roadTypeId])
  constructionType   ConstructionTypeMaster @relation(fields: [constructionTypeId], references: [constructionTypeId])
}

model OtherDetails {
  surveyUniqueCode            String             @id
  waterSourceId               String
  rainWaterHarvestingSystem   String?            @db.Char(3)
  plantation                  String?            @db.Char(3)
  parking                     String?            @db.Char(3)
  pollution                   String?            @db.Char(3)
  pollutionMeasurementTaken   String?            @db.Text
  waterSupplyWithin200Meters  String?            @db.Char(3)
  sewerageLineWithin100Meters String?            @db.Char(3)
  disposalTypeId              String
  totalPlotArea               Float              @db.DoublePrecision
  builtupAreaOfGroundFloor    Float              @db.DoublePrecision
  remarks                     String?            @db.Text
  survey                      SurveyDetails      @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])
  waterSource                 WaterSourceMaster  @relation(fields: [waterSourceId], references: [waterSourceId])
  disposalType                DisposalTypeMaster @relation(fields: [disposalTypeId], references: [disposalTypeId])
}

model ResidentialPropertyAssessment {
  floorAssessmentId     String                   @id @default(uuid())
  surveyUniqueCode      String
  floorNumber           String                   @db.VarChar(50)
  occupancyStatusId     String
  constructionNatureId  String
  coveredArea           Decimal                  @db.Decimal(10, 2) // changed type from Float to Decimal
  allRoomVerandaArea    Decimal                  @db.Decimal(10, 2) // changed type from Float to Decimal
  allBalconyKitchenArea Decimal                  @db.Decimal(10, 2) // changed type from Float to Decimal
  allGarageArea         Decimal                  @db.Decimal(10, 2) // changed type from Float to Decimal
  carpetArea            Decimal                  @db.Decimal(10, 2) // changed type from Float to Decimal
  survey                SurveyDetails            @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])
  occupancyStatus       OccupancyStatusMaster    @relation(fields: [occupancyStatusId], references: [occupancyStatusId])
  constructionNature    ConstructionNatureMaster @relation(fields: [constructionNatureId], references: [constructionNatureId])
}

model NonResidentialPropertyAssessment {
  floorAssessmentId    String                      @id @default(uuid())
  surveyUniqueCode     String
  floorNumber          String                      @db.VarChar(50)
  nrPropertyCategoryId String
  nrSubCategoryId      String
  establishmentName    String                      @db.Text
  licenseNo            String?                     @db.VarChar(20)
  licenseExpiryDate    DateTime?
  occupancyStatusId    String
  constructionNatureId String
  builtupArea          Decimal                     @db.Decimal(10, 2) // changed type from Float to Decimal
  nrPropertyCategory   NrPropertyCategoryMaster    @relation(fields: [nrPropertyCategoryId], references: [propertyCategoryId], onDelete: Restrict)
  nrSubCategory        NrPropertySubCategoryMaster @relation(fields: [nrSubCategoryId], references: [subCategoryId], onDelete: Restrict)
  occupancyStatus      OccupancyStatusMaster       @relation(fields: [occupancyStatusId], references: [occupancyStatusId])
  constructionNature   ConstructionNatureMaster    @relation(fields: [constructionNatureId], references: [constructionNatureId])
  survey               SurveyDetails               @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])

  @@index([nrPropertyCategoryId])
  @@index([nrSubCategoryId])
}

model PropertyAttachmentDetails {
  surveyUniqueCode String        @id
  image1Url        String?       @db.VarChar(50)
  image2Url        String?       @db.VarChar(50)
  image3Url        String?       @db.VarChar(50)
  image4Url        String?       @db.VarChar(50)
  image5Url        String?       @db.VarChar(50)
  image6Url        String?       @db.VarChar(50)
  image7Url        String?       @db.VarChar(50)
  image8Url        String?       @db.VarChar(50)
  image9Url        String?       @db.VarChar(50)
  image10Url       String?       @db.VarChar(50)
  survey           SurveyDetails @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])
}
