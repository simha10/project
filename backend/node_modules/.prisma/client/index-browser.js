
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  role: 'role',
  phoneNumber: 'phoneNumber',
  assignedWards: 'assignedWards',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ULBScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ZoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  ulbId: 'ulbId'
};

exports.Prisma.WardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  zoneId: 'zoneId'
};

exports.Prisma.MohallaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  wardId: 'wardId'
};

exports.Prisma.PropertyResponseTypeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description'
};

exports.Prisma.RoadTypeMappingScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description'
};

exports.Prisma.ConstructionTypeMappingScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description'
};

exports.Prisma.NRPropCategoryMappingScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description'
};

exports.Prisma.NRPropSubCategoryMappingScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  categoryId: 'categoryId'
};

exports.Prisma.SurveyScalarFieldEnum = {
  id: 'id',
  surveyorId: 'surveyorId',
  ulbId: 'ulbId',
  zoneId: 'zoneId',
  wardId: 'wardId',
  mohallaId: 'mohallaId',
  dateOfEntry: 'dateOfEntry',
  gisId: 'gisId',
  mapId: 'mapId',
  subGisId: 'subGisId',
  propertyType: 'propertyType',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyDetailsScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  responseTypeId: 'responseTypeId',
  houseNumber: 'houseNumber',
  electricityNo: 'electricityNo',
  wardSewerageNo: 'wardSewerageNo',
  respondentName: 'respondentName',
  isRented: 'isRented',
  rentAmount: 'rentAmount',
  tenantName: 'tenantName',
  tenantMobile: 'tenantMobile',
  tenantAadhaar: 'tenantAadhaar'
};

exports.Prisma.OwnerDetailsScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  ownerName: 'ownerName',
  fatherHusbandName: 'fatherHusbandName',
  mobileNo: 'mobileNo',
  aadhaarNo: 'aadhaarNo',
  email: 'email',
  alternateMobile: 'alternateMobile',
  isNRI: 'isNRI',
  nriAddress: 'nriAddress'
};

exports.Prisma.LocationDetailsScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  latitude: 'latitude',
  longitude: 'longitude',
  assessmentYear: 'assessmentYear',
  roadTypeId: 'roadTypeId',
  constructionYear: 'constructionYear',
  constructionTypeId: 'constructionTypeId',
  landmark: 'landmark',
  address: 'address',
  newWardNo: 'newWardNo',
  plotArea: 'plotArea',
  builtUpArea: 'builtUpArea'
};

exports.Prisma.OtherDetailsScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  rainHarvesting: 'rainHarvesting',
  waterSupply: 'waterSupply',
  sewerageLine: 'sewerageLine',
  parkingType: 'parkingType',
  parkingArea: 'parkingArea',
  isCommercial: 'isCommercial',
  commercialArea: 'commercialArea'
};

exports.Prisma.FloorDetailsScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  floorNo: 'floorNo',
  floorType: 'floorType',
  details: 'details',
  area: 'area',
  usage: 'usage',
  isRented: 'isRented',
  rentAmount: 'rentAmount'
};

exports.Prisma.PropertyAssessmentScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  categoryId: 'categoryId',
  subCategoryId: 'subCategoryId',
  annualRent: 'annualRent',
  marketValue: 'marketValue',
  assessedValue: 'assessedValue',
  taxAmount: 'taxAmount',
  remarks: 'remarks'
};

exports.Prisma.QCRecordScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  qcOfficerId: 'qcOfficerId',
  status: 'status',
  remarks: 'remarks',
  qcDate: 'qcDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyAttachmentScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  type: 'type',
  url: 'url',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.PropertyType = exports.$Enums.PropertyType = {
  RESIDENTIAL: 'RESIDENTIAL',
  NON_RESIDENTIAL: 'NON_RESIDENTIAL',
  MIXED: 'MIXED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  ULB: 'ULB',
  Zone: 'Zone',
  Ward: 'Ward',
  Mohalla: 'Mohalla',
  PropertyResponseType: 'PropertyResponseType',
  RoadTypeMapping: 'RoadTypeMapping',
  ConstructionTypeMapping: 'ConstructionTypeMapping',
  NRPropCategoryMapping: 'NRPropCategoryMapping',
  NRPropSubCategoryMapping: 'NRPropSubCategoryMapping',
  Survey: 'Survey',
  PropertyDetails: 'PropertyDetails',
  OwnerDetails: 'OwnerDetails',
  LocationDetails: 'LocationDetails',
  OtherDetails: 'OtherDetails',
  FloorDetails: 'FloorDetails',
  PropertyAssessment: 'PropertyAssessment',
  QCRecord: 'QCRecord',
  PropertyAttachment: 'PropertyAttachment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
