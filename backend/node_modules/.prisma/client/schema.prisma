// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum PropertyType {
  RESIDENTIAL
  NON_RESIDENTIAL
  MIXED
}

enum RoadType {
  METALLED
  UNMETALLED
  KACHA
  OTHER
}

enum ConstructionType {
  RCC
  LOAD_BEARING
  MIXED
  OTHER
}

enum NRPropCategory {
  COMMERCIAL
  INDUSTRIAL
  INSTITUTIONAL
  OTHER
}

enum NRSubCategory {
  SHOP
  OFFICE
  WAREHOUSE
  FACTORY
  SCHOOL
  HOSPITAL
  OTHER
}

// Base Models
model User {
  id            String     @id @default(uuid())
  username      String     @unique
  password      String
  role          String // SUPERADMIN, ADMIN, SUPERVISOR, SURVEYOR
  phoneNumber   String // Adding phone number field
  assignedWards String[] // Array of ward IDs
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  sessions      Session[]
  surveys       Survey[]
  qcRecords     QCRecord[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ULB {
  id        String   @id @default(uuid())
  name      String   @unique
  zones     Zone[]
  surveys   Survey[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Zone {
  id      String   @id @default(uuid())
  name    String
  ulbId   String
  ulb     ULB      @relation(fields: [ulbId], references: [id])
  wards   Ward[]
  surveys Survey[]
}

model Ward {
  id       String    @id @default(uuid())
  name     String
  zoneId   String
  zone     Zone      @relation(fields: [zoneId], references: [id])
  mohallas Mohalla[]
  surveys  Survey[]
}

model Mohalla {
  id      String   @id @default(uuid())
  name    String
  wardId  String
  ward    Ward     @relation(fields: [wardId], references: [id])
  surveys Survey[]
}

// Dropdown Mapping Tables
model PropertyResponseType {
  id          String            @id @default(uuid())
  code        String            @unique
  description String
  surveys     PropertyDetails[]
}

model RoadTypeMapping {
  id          String            @id @default(uuid())
  code        String            @unique
  description String
  locations   LocationDetails[]
}

model ConstructionTypeMapping {
  id          String            @id @default(uuid())
  code        String            @unique
  description String
  locations   LocationDetails[]
}

model NRPropCategoryMapping {
  id            String                     @id @default(uuid())
  code          String                     @unique
  description   String
  subCategories NRPropSubCategoryMapping[]
  assessments   PropertyAssessment[]
}

model NRPropSubCategoryMapping {
  id          String                @id @default(uuid())
  code        String                @unique
  description String
  categoryId  String
  category    NRPropCategoryMapping @relation(fields: [categoryId], references: [id])
  assessments PropertyAssessment[]
}

// Survey Models
model Survey {
  id           String               @id @default(uuid())
  surveyorId   String
  surveyor     User                 @relation(fields: [surveyorId], references: [id])
  ulbId        String
  ulb          ULB                  @relation(fields: [ulbId], references: [id])
  zoneId       String
  zone         Zone                 @relation(fields: [zoneId], references: [id])
  wardId       String
  ward         Ward                 @relation(fields: [wardId], references: [id])
  mohallaId    String
  mohalla      Mohalla              @relation(fields: [mohallaId], references: [id])
  dateOfEntry  DateTime
  gisId        String
  mapId        String
  subGisId     String
  propertyType PropertyType
  property     PropertyDetails?
  owner        OwnerDetails?
  location     LocationDetails?
  other        OtherDetails?
  floors       FloorDetails[]
  assessment   PropertyAssessment?
  qcRecord     QCRecord?
  attachments  PropertyAttachment[]
  status       String               @default("PENDING")
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@index([surveyorId])
  @@index([ulbId])
  @@index([zoneId])
  @@index([wardId])
  @@index([mohallaId])
}

model PropertyDetails {
  id             String               @id @default(uuid())
  surveyId       String               @unique
  survey         Survey               @relation(fields: [surveyId], references: [id])
  responseTypeId String
  responseType   PropertyResponseType @relation(fields: [responseTypeId], references: [id])
  houseNumber    String
  electricityNo  String
  wardSewerageNo String
  respondentName String
  isRented       Boolean              @default(false)
  rentAmount     Float?
  tenantName     String?
  tenantMobile   String?
  tenantAadhaar  String?
}

model OwnerDetails {
  id                String  @id @default(uuid())
  surveyId          String  @unique
  survey            Survey  @relation(fields: [surveyId], references: [id])
  ownerName         String
  fatherHusbandName String
  mobileNo          String
  aadhaarNo         String
  email             String?
  alternateMobile   String?
  isNRI             Boolean @default(false)
  nriAddress        String?
}

model LocationDetails {
  id                 String                  @id @default(uuid())
  surveyId           String                  @unique
  survey             Survey                  @relation(fields: [surveyId], references: [id])
  latitude           Float
  longitude          Float
  assessmentYear     String
  roadTypeId         String
  roadType           RoadTypeMapping         @relation(fields: [roadTypeId], references: [id])
  constructionYear   String
  constructionTypeId String
  constructionType   ConstructionTypeMapping @relation(fields: [constructionTypeId], references: [id])
  landmark           String
  address            String
  newWardNo          String
  plotArea           Float
  builtUpArea        Float
}

model OtherDetails {
  id             String  @id @default(uuid())
  surveyId       String  @unique
  survey         Survey  @relation(fields: [surveyId], references: [id])
  rainHarvesting Boolean
  waterSupply    String
  sewerageLine   String
  parkingType    String
  parkingArea    Float?
  isCommercial   Boolean @default(false)
  commercialArea Float?
}

model FloorDetails {
  id         String  @id @default(uuid())
  surveyId   String
  survey     Survey  @relation(fields: [surveyId], references: [id])
  floorNo    Int
  floorType  String
  details    String
  area       Float
  usage      String
  isRented   Boolean @default(false)
  rentAmount Float?

  @@index([surveyId])
}

model PropertyAssessment {
  id            String                   @id @default(uuid())
  surveyId      String                   @unique
  survey        Survey                   @relation(fields: [surveyId], references: [id])
  categoryId    String
  category      NRPropCategoryMapping    @relation(fields: [categoryId], references: [id])
  subCategoryId String
  subCategory   NRPropSubCategoryMapping @relation(fields: [subCategoryId], references: [id])
  annualRent    Float
  marketValue   Float
  assessedValue Float
  taxAmount     Float
  remarks       String?
}

model QCRecord {
  id          String   @id @default(uuid())
  surveyId    String   @unique
  survey      Survey   @relation(fields: [surveyId], references: [id])
  qcOfficerId String
  qcOfficer   User     @relation(fields: [qcOfficerId], references: [id])
  status      String // APPROVED, REJECTED, PENDING
  remarks     String?
  qcDate      DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([qcOfficerId])
}

model PropertyAttachment {
  id          String   @id @default(uuid())
  surveyId    String
  survey      Survey   @relation(fields: [surveyId], references: [id])
  type        String // PHOTO, DOCUMENT
  url         String
  description String?
  createdAt   DateTime @default(now())

  @@index([surveyId])
}
